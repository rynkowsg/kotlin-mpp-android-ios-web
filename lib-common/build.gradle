group 'com.twobuffers.playam.common'
version '0.0.1'

buildscript {
    ext.kotlin_version = '1.3.21'
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'

println("[build.gradle of \"${project.name}\"]")
println("rootDir:     ${rootDir}")
println("projectDir:  ${projectDir}")

android {
    defaultConfig {
        compileSdkVersion 28
    }
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
        }
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework('LibCommon')
            }
        }
        fromPreset(presets.android, 'android')
        fromPreset(presets.js, 'browser')
    }
    sourceSets {
        commonMain {
            repositories {
                mavenCentral()
            }
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        androidMain {
            repositories {
                google()
                jcenter()
            }
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        browserMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-js'
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework("LibCommon", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode
